#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>

void check_error(cl_int err, const char *message) {
    if (err != CL_SUCCESS) {
        printf("Error: %s (code %d)\n", message, err);
        exit(EXIT_FAILURE);
    }
}

int main() {
    cl_int err;
    cl_uint num_platforms;

    // Get the number of platforms
    err = clGetPlatformIDs(0, NULL, &num_platforms);
    check_error(err, "Unable to get platforms");
    printf("Found %u OpenCL platforms.\n", num_platforms);

    if (num_platforms == 0) {
        return 0;
    }

    cl_platform_id *platforms = (cl_platform_id *)malloc(num_platforms * sizeof(cl_platform_id));
    clGetPlatformIDs(num_platforms, platforms, NULL);

    for (cl_uint i = 0; i < num_platforms; i++) {
        char platform_name[128], platform_vendor[128];
        clGetPlatformInfo(platforms[i], CL_PLATFORM_NAME, sizeof(platform_name), platform_name, NULL);
        clGetPlatformInfo(platforms[i], CL_PLATFORM_VENDOR, sizeof(platform_vendor), platform_vendor, NULL);
        printf("\nPlatform %u:\n  Name: %s\n  Vendor: %s\n", i + 1, platform_name, platform_vendor);

        cl_uint num_devices;
        err = clGetDeviceIDs(platforms[i], CL_DEVICE_TYPE_ALL, 0, NULL, &num_devices);
        if (err == CL_DEVICE_NOT_FOUND) {
            printf("  No devices found on this platform.\n");
            continue;
        }
        check_error(err, "Unable to get devices");

        cl_device_id *devices = (cl_device_id *)malloc(num_devices * sizeof(cl_device_id));
        clGetDeviceIDs(platforms[i], CL_DEVICE_TYPE_ALL, num_devices, devices, NULL);

        for (cl_uint j = 0; j < num_devices; j++) {
            char device_name[128];
            cl_device_type device_type;
            cl_uint compute_units;
            size_t work_group_size;
            cl_ulong memory_size;

            clGetDeviceInfo(devices[j], CL_DEVICE_NAME, sizeof(device_name), device_name, NULL);
            clGetDeviceInfo(devices[j], CL_DEVICE_TYPE, sizeof(device_type), &device_type, NULL);
            clGetDeviceInfo(devices[j], CL_DEVICE_MAX_COMPUTE_UNITS, sizeof(compute_units), &compute_units, NULL);
            clGetDeviceInfo(devices[j], CL_DEVICE_MAX_WORK_GROUP_SIZE, sizeof(work_group_size), &work_group_size, NULL);
            clGetDeviceInfo(devices[j], CL_DEVICE_GLOBAL_MEM_SIZE, sizeof(memory_size), &memory_size, NULL);

            printf("  Device %u:\n", j + 1);
            printf("    Name: %s\n", device_name);
            printf("    Type: %s\n", 
                   (device_type & CL_DEVICE_TYPE_GPU) ? "GPU" : 
                   (device_type & CL_DEVICE_TYPE_CPU) ? "CPU" : "Other");
            printf("    Compute Units: %u\n", compute_units);
            printf("    Max Work Group Size: %zu\n", work_group_size);
            printf("    Global Memory: %llu MB\n", memory_size / (1024 * 1024));
        }
        free(devices);
    }
    free(platforms);
    return 0;
}
